
{{$Sep := .Separate}}
{{- if $Sep}}package model_{{.Package}}{{- else}}package form{{- end}}
{{$StructName := .StructName}}
{{$Int :=  "int" }}
{{$Int8  :="int8" }}
{{$Int16 :="int16" }}
{{$Int32 :="int32" }}
{{$Int64 :="int64" }}
{{$Float64 :="float64" }}
{{$Float32 :="float32" }}
{{$Time :="time.Time" }}
// Query{{$StructName}}Form query {{$StructName}}  form ;  if some field is required, create binding:"required" to tag by self
type Query{{$StructName}}Form struct{
{{- range .Fields}}{{- if not .IsUnique}}
{{- if eq .Type $Time -}}
		{{.FieldName}}Map map[string]string `json:"{{.HumpName}}Map" form:"{{.HumpName}}Map"`  // example: {{.FieldName}}Map[>]=some value&{{.FieldName}}Map[<]=some value; key must be ">,>=,<,<=,="
{{- else if eq .Type $Int -}}
		{{.FieldName}}Map map[string]string `json:"{{.HumpName}}Map" form:"{{.HumpName}}Map"`  // example: {{.FieldName}}Map[>]=some value&{{.FieldName}}Map[<]=some value; key must be ">,>=,<,<=,="
{{- else if eq .Type $Int8 -}}
		{{.FieldName}}Map map[string]string `json:"{{.HumpName}}Map" form:"{{.HumpName}}Map"`  // example: {{.FieldName}}Map[>]=some value&{{.FieldName}}Map[<]=some value; key must be ">,>=,<,<=,="
{{- else if eq .Type $Int16 -}}
		{{.FieldName}}Map map[string]string `json:"{{.HumpName}}Map" form:"{{.HumpName}}Map"`  // example: {{.FieldName}}Map[>]=some value&{{.FieldName}}Map[<]=some value; key must be ">,>=,<,<=,="
{{- else if eq .Type $Int32 -}}
		{{.FieldName}}Map map[string]string `json:"{{.HumpName}}Map" form:"{{.HumpName}}Map"`  // example: {{.FieldName}}Map[>]=some value&{{.FieldName}}Map[<]=some value; key must be ">,>=,<,<=,="
{{- else if eq .Type $Int64 -}}
		{{.FieldName}}Map map[string]string `json:"{{.HumpName}}Map" form:"{{.HumpName}}Map"`  // example: {{.FieldName}}Map[>]=some value&{{.FieldName}}Map[<]=some value; key must be ">,>=,<,<=,="
{{- else if eq .Type $Float32 -}}
		{{.FieldName}}Map map[string]string `json:"{{.HumpName}}Map" form:"{{.HumpName}}Map"`  // example: {{.FieldName}}Map[>]=some value&{{.FieldName}}Map[<]=some value; key must be ">,>=,<,<=,="
{{- else if eq .Type $Float64 -}}
		{{.FieldName}}Map map[string]string `json:"{{.HumpName}}Map" form:"{{.HumpName}}Map"`  // example: {{.FieldName}}Map[>]=some value&{{.FieldName}}Map[<]=some value; key must be ">,>=,<,<=,="
{{- else -}}
		{{.FieldName}} *{{.Type}} `json:"{{.HumpName}}" form:"{{.HumpName}}"`  // cond {{.FieldName}}
{{- end}}
{{- end}}
{{end}}OrderMap map[string]string `json:"orderMap" form:"orderMap"`  // example: orderMap[column]=desc
		PageNum int `json:"pageNum" form:"pageNum"` // get all without uploading
		PageSize int `json:"pageSize" form:"pageSize"` // get all without uploading
		}


// Create{{$StructName}}Form create {{$StructName}} form
type Create{{$StructName}}Form struct {
	{{range .Fields -}}
	  {{if not .IsBaseModel -}}
		{{if .IsUnique -}}
			{{.FieldName}} {{.Type}} `json:"{{.HumpName}}" form:"{{.HumpName}}" binding:"required"` // {{.HumpName}}
		{{else -}}
			{{.FieldName}} {{.Type}} `json:"{{.HumpName}}" form:"{{.HumpName}}"` // {{.HumpName}}
        {{end -}}
	  {{end -}}
	{{- end -}}
}

// Valid create {{$StructName}}  form verify
func (a *Create{{$StructName}}Form) Valid() (err error) {
	return
}

type Create{{$StructName}}BatchForm []*Create{{$StructName}}Form

// Up{{$StructName}}Form  edit {{$StructName}} form
type Up{{$StructName}}Form struct {
	{{range .Fields -}}
	  {{if not .IsBaseModel -}}
		{{.FieldName}} {{.Type}} `json:"{{.HumpName}}" form:"{{.HumpName}}"` // {{.HumpName}}
	  {{end -}}
	{{- end -}}
}

// Valid  edit {{$StructName}} form verify
func (a *Up{{$StructName}}Form) Valid() (err error) {
	return
}


type {{$StructName}}Res struct{
{{- range .Fields}}{{- if not .IsUnique}}
		{{.FieldName}} {{.Type}} `json:"{{.HumpName}},omitempty"`
{{- end}}
{{- end}}
		}